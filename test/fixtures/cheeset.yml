swagger: '2.0'
info:
  description: |
    Welcome to the sample Cheese Store API reference. This is a live example of how you can use [Spectacle](http://sourcey.com/spectacle) in conjunction with [Swagger](http://swagger.io) to generate beautiful static documentation for your own APIs.

    The Cheese Store API is organized around the [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer) mothodology, and it uses resource-oriented URLs, and common HTTP response codes to indicate API errors. All requests are authenticated using an `api-key` which can be obtained from your developer dashboard. And now, more cheese...

    Hard cheese gouda say cheese. Ricotta cauliflower cheese cheesecake bocconcini edam bocconcini fromage feta. Who moved my cheese bocconcini cheese and wine cottage cheese cheese on toast who moved my cheese caerphilly stinking bishop. Bocconcini cheesy feet the big cheese macaroni cheese cheesy feet mascarpone.
  version: 1.0.0
  title: Cheese Store
  termsOfService: 'http://cheesy.sourcey.com/terms'
  contact:
    email: cheesy@sourcey.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: cheesy.sourcey.com
basePath: /v1
tags:
  - name: Cheese
    description: Cheese methods provide access to information and operations relating to the cheese available in the store.
    externalDocs:
      description: Find out more
      url: 'http://cheesy.sourcey.com'
  - name: Store
    description: Store methods provide access to cheese store orders.
  - name: Customer
    description: Customer methods contain operations relating to customer accounts.
    externalDocs:
      description: Find out more
      url: 'http://cheesy.sourcey.com'
schemes:
  - http
  - https
paths:
  '/customer/{username}':
    get:
      tags:
        - Customer
      summary: Get customer by username
      description: Get customer by their customer username.
      operationId: getCustomerByName
      consumes:
        - application/xml
        - application/json
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The username of the customer to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Order'
        '404':
          description: Customer not found
          schema:
            $ref: '#/definitions/NotFoundError'
    put:
      tags:
        - Order
      summary: Update customer
      description: This can only be done by the logged in customer.
      operationId: updateCustomer
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: Username of the customer to update.
          required: true
          type: string
        - in: body
          name: body
          description: Customer object to be updated.
          required: true
          schema:
            $ref: '#/definitions/Order'
      responses:
        '400':
          description: Invalid customer supplied
        '404':
          description: Customer not found
          schema:
            $ref: '#/definitions/NotFoundError'
securityDefinitions:
  cheesy_auth:
    type: oauth2
    authorizationUrl: 'http://cheesy.sourcey.com/api/oauth/dialog'
    flow: implicit
    scopes:
      'write:cheeses': Modify cheeses in your account
      'read:cheeses': Read your cheeses
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      cheeseId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
          - placed
          - approved
          - delivered
      complete:
        type: boolean
        default: false
    example:
      cheeseId: '1'
      complete: 'true'
      id: '1'
      quantity: '66'
      shipDate: '04-10-2017 00:09:21 UTC'
      status: available
    xml:
      name: Order
  Category:
    allOf:
      - $ref: '#/definitions/Order'
      - properties:
          id:
            type: integer
            format: int64
            example: 1
          name:
            type: string
            example: Italian Cheese
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
