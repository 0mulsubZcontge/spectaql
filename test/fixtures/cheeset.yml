swagger: '2.0'
info:
  description: |
    Welcome to the sample Cheese Store API reference. This is a live example of how you can use [Spectacle](http://sourcey.com/spectacle) in conjunction with [Swagger](http://swagger.io) to generate beautiful static documentation for your own APIs.

    The Cheese Store API is organized around the [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer) mothodology, and it uses resource-oriented URLs, and common HTTP response codes to indicate API errors. All requests are authenticated using an `api-key` which can be obtained from your developer dashboard. And now, more cheese...

    Hard cheese gouda say cheese. Ricotta cauliflower cheese cheesecake bocconcini edam bocconcini fromage feta. Who moved my cheese bocconcini cheese and wine cottage cheese cheese on toast who moved my cheese caerphilly stinking bishop. Bocconcini cheesy feet the big cheese macaroni cheese cheesy feet mascarpone.
  version: 1.0.0
  title: Cheese Store
  termsOfService: 'http://cheesy.sourcey.com/terms'
  contact:
    email: cheesy@sourcey.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: cheesy.sourcey.com
basePath: /v1
tags:
  - name: Cheese
    description: Cheese methods provide access to information and operations relating to the cheese available in the store.
    externalDocs:
      description: Find out more
      url: 'http://cheesy.sourcey.com'
  - name: Store
    description: Store methods provide access to cheese store orders.
  - name: Customer
    description: Customer methods contain operations relating to customer accounts.
    externalDocs:
      description: Find out more
      url: 'http://cheesy.sourcey.com'
schemes:
  - http
  - https
paths:
  /customer/createMultiple:
    post:
      tags:
        - Customer
      summary: Create multiple customers
      description: |
        Create a list of customers from the given input array.

        And here is a random inline code block:

        ```json
        {
          "greeting": Wassup()
        }
        ```

        All good?
      operationId: createMultipleCustomers
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of created customer objects
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Customer'
      responses:
        default:
          description: Successful operation
securityDefinitions:
  cheesy_auth:
    type: oauth2
    authorizationUrl: 'http://cheesy.sourcey.com/api/oauth/dialog'
    flow: implicit
    scopes:
      'write:cheeses': Modify cheeses in your account
      'read:cheeses': Read your cheeses
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      cheeseId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
          - placed
          - approved
          - delivered
      complete:
        type: boolean
        default: false
    example:
      cheeseId: '1'
      complete: 'true'
      id: '1'
      quantity: '66'
      shipDate: '04-10-2017 00:09:21 UTC'
      status: available
    xml:
      name: Order
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 1
      name:
        type: string
        example: Italian Cheese
    xml:
      name: Category
  Customer:
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 1
      username:
        type: string
        example: gordo
      firstName:
        type: string
        description: Customer first name
        example: Alotta
      lastName:
        type: string
        description: Customer last name
        example: Cheese
      email:
        type: string
        example: love@cheese.com
      password:
        type: string
        example: secret
      phone:
        type: string
        example: '+3344556677'
      customerStatus:
        type: string
        description: Customer status (the heavier the better)
        enum:
          - skinny
          - average
          - fat
          - obese
        example: obese
    xml:
      name: Customer
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
        example: No cheese found
      message:
        type: string
        example: No cheese for you!
  ValidationError:
    type: object
    properties:
      code:
        type: integer
        format: int32
        example: 422
      type:
        type: string
        example: Validation error
      message:
        type: string
        example: Your cheese is not mouldy enough
  NotFoundError:
    type: object
    properties:
      code:
        type: integer
        format: int32
        example: 404
      type:
        type: string
        example: Not found
      message:
        type: string
        example: Your cheese has already been eaten
  Cheese:
    type: object
    required:
      - name
      - photoUrls
    properties:
      id:
        type: integer
        format: int64
        example: 1
      category:
        $ref: '#/definitions/Category'
      name:
        type: string
        example: Gorgonzola
      photoUrls:
        type: array
        xml:
          name: photoUrl
          wrapped: true
        items:
          type: string
        example:
          - 'https://wannabechef.com/gorgonzola.jpg'
      tags:
        type: array
        xml:
          name: tag
          wrapped: true
        items:
          $ref: 'tag.yml#/Tag/'
      status:
        type: string
        description: Cheese status in the store
        enum:
          - available
          - pending
          - sold
        example: available
    xml:
      name: Cheese
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
